" Misc settings
filetype plugin indent on
syntax on
set hidden
set backspace=indent,eol,start
set cursorline
set autoindent
set copyindent
set number
set shiftwidth=2
set ts=2
set shiftround
set showmatch
set ignorecase
set smartcase
set smarttab
set expandtab
set incsearch
set history=1000
set undolevels=1000
set wildignore=*.swp,*.bak
set wildmenu
set visualbell
set noerrorbells
set nobackup
set noswapfile
set mouse=a
set scrolloff=5
set tags+=tags;/
autocmd BufNewFile,BufRead *.ts set syntax=javascript

" File tree configuration
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_winsize = 15

" Map leader to <Space>
let mapleader = "\<Space>"

" Make the leader key not timeout
set notimeout
set ttimeout

" Map <C-g> to <esc> since it's used as keyboard-quit in spacemacs
noremap! <C-g> <Esc>

" TODO: This is used by VACS
noremap! <F10> <Esc>

" Toggles
nnoremap <Leader>tp :set invpaste<CR>
nnoremap <Leader>tn :set invnumber<CR>
nnoremap <Leader>tr :set invrelativenumber<CR>
nnoremap <Leader>tl :set invcursorline<CR>
nnoremap <Leader>sc :nohl<CR>

" Files
nnoremap <Leader>ft :Lexplore<CR>
nnoremap <Leader>ff :edit 
nnoremap <Leader>fs :write<CR>
nnoremap <Leader>fw :write<Space>
nnoremap <Leader>fed :edit $MYVIMRC<CR>
nnoremap <Leader>feR :source $MYVIMRC<CR>

" Windows
nnoremap <Leader>1 1<C-w>w
nnoremap <Leader>2 2<C-w>w
nnoremap <Leader>3 3<C-w>w
nnoremap <Leader>4 4<C-w>w
nnoremap <Leader>wR <C-w><C-r>
nnoremap <Leader>wr <C-w>x
nnoremap <Leader>wd <C-w>c
nnoremap <Leader>wh <C-w>h
nnoremap <Leader>wj <C-w>j
nnoremap <Leader>wk <C-w>k
nnoremap <Leader>wl <C-w>l
nnoremap <Leader>wm <C-w>o
nnoremap <Leader>ws <C-w>s
nnoremap <Leader>wv <C-w>v

" Buffer
nnoremap <Leader><Space> <PageDown>
nnoremap <Leader>bb :buffers<CR>:buffer 
nnoremap <Leader>bc :buffers<CR>:bdelete! 
nnoremap <Leader>bd :buffer#<CR>:bdelete#<CR>
nnoremap <Leader>bn :bnext<CR>
nnoremap <Leader>bp :bprevious<CR>
nnoremap <Leader><Tab> :buffer#<CR>

" Search
nnoremap <Leader>/ :call NewScratchBuffer('ack.vim')<CR>q:a:read! ack 
nnoremap <Leader>st viw"ay:call NewScratchBuffer('ack.vim')<CR>q:a:read! ack <Esc>"ap<CR>
nnoremap <Leader>ss :call NewScratchBuffer('swoop.vim')<CR>q:a:read! grep -nH  #<Esc>hha
nnoremap <Leader>sg :call NewScratchBuffer('grep.vim')<CR>q:a:read! grep -rniH 
nnoremap <Leader>pF :call NewScratchBuffer('find.vim')<CR>q:a:read! find . -type f \| grep 
nnoremap <Leader>pf :call NewScratchBuffer('find.vim')<CR>:read! find $(git rev-parse --show-toplevel) -type f \| percol --tty=/dev/tty<CR>gf<C-w>o
nnoremap <Leader>gd :call NewScratchBuffer('git.vim')<CR>q:a:read! git diff<CR>gg
nnoremap <Leader>gh :call NewScratchBuffer('git.vim')<CR>q:a:read! git diff --cached<CR>gg
nnoremap <Leader>gl :call NewScratchBuffer('git.vim')<CR>q:a:read! git log -80<CR>gg
nnoremap <Leader>gs :call NewScratchBuffer('git.vim')<CR>q:a:read! git status<CR>gg

" Quitting
nnoremap <Leader>qq :qa<CR>
nnoremap <Leader>qQ :qa!<CR>

" Support org-mode like folding
function OrgFold(lnum)
  let level = strlen(matchstr(getline(a:lnum), '\v^\s*\zs\*+'))
  if level > 0
    return '>'.level
  else
    return '='
  endif
endfunction
set foldmethod=expr foldexpr=OrgFold(v:lnum)
set foldtext=getline(v:foldstart).'...'.repeat('\ ',999)
nnoremap <Tab> za

function IsFiletreeOpen()
  return bufname(tabpagebuflist()[0]) == "NetrwTreeListing"
endfunction

function GoToLineOtherWindow(shouldReturnToWin)
  let sourceWindow = winnr()
  let otherWindow = IsFiletreeOpen() == 1 ? 2 : 1
  let bufName = bufname()
  let lineNum = line('.')
  execute otherWindow .. "wincmd w"
  execute "buffer " . bufName
  execute "normal " . lineNum . "gg"
  execute "normal 0gF"
  if a:shouldReturnToWin > 0
    execute sourceWindow .. "wincmd w"
  endif
endfunction

" Makes a split window below the current window if there is not a window with
" the buffer `name` visible.
function NewScratchBuffer(name)
  let winNum = bufwinnr(a:name)
  if winNum > -1
    execute winNum .. "wincmd w"
    execute "normal ggdG"
  elseif bufexists(a:name)
    below 18split
    execute "buffer" a:name
    execute "normal ggdG"
  else
    below 18new
    execute "file" a:name
    setlocal buftype=nofile
    nnoremap <buffer> <CR> :call GoToLineOtherWindow(0)<CR>
    nnoremap <buffer> <BS> :call GoToLineOtherWindow(1)<CR>
  endif
endfunction
