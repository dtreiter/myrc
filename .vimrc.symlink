" Misc settings
filetype plugin indent on
syntax on
set hidden
set backspace=indent,eol,start
set cursorline
set autoindent
set copyindent
set number
set shiftwidth=2
set shiftround
set showmatch
set ignorecase
set smartcase
set smarttab
set expandtab
set incsearch
set history=1000
set undolevels=1000
set wildignore=*.swp,*.bak
set wildmenu
set visualbell
set noerrorbells
set nobackup
set noswapfile
set mouse=a
set scrolloff=5

" Map leader to <Space>
let mapleader = "\<Space>"

" Make the leader key not timeout
set notimeout
set ttimeout

" Map <C-g> to <esc> since it's used as keyboard-quit in spacemacs
noremap! <C-g> <Esc>

" TODO: This is used by VACS
noremap! <F10> <Esc>

" Toggles
nnoremap <Leader>tp :set invpaste<CR>
nnoremap <Leader>tn :set invnumber<CR>
nnoremap <Leader>tr :set invrelativenumber<CR>
nnoremap <Leader>tl :set invcursorline<CR>
nmap <Leader>tt :call ToggleAutoEscape()<cr>

" Files
nnoremap <Leader>ff :edit 
nnoremap <Leader>fs :write<CR>
nnoremap <Leader>fw :write<Space>
nnoremap <Leader>fed :edit $MYVIMRC<CR>
nnoremap <Leader>feR :source $MYVIMRC<CR>

" Windows
nnoremap <Leader>1 1<C-w>w
nnoremap <Leader>2 2<C-w>w
nnoremap <Leader>3 3<C-w>w
nnoremap <Leader>4 4<C-w>w
nnoremap <Leader>wR <C-w><C-r>
nnoremap <Leader>wc <C-w>c
nnoremap <Leader>wh <C-w>h
nnoremap <Leader>wj <C-w>j
nnoremap <Leader>wk <C-w>k
nnoremap <Leader>wl <C-w>l
nnoremap <Leader>wm <C-w>o
nnoremap <Leader>ws <C-w>s
nnoremap <Leader>wv <C-w>v

" Buffer
nnoremap <Leader><Space> <PageDown>
nnoremap <Leader>bb :buffers<CR>:buffer 
nnoremap <Leader>bc :buffers<CR>:bdelete! 
nnoremap <Leader>bk :buffer#<CR>:bdelete#<CR>
nnoremap <Leader>bn :bnext<CR>
nnoremap <Leader>bp :bprevious<CR>
nnoremap <Leader><Tab> :bprevious<CR>

" Search
nnoremap <Leader>/ :call NewScratchBuffer('ack.vim')<CR>q:a:read! ack 
nnoremap <Leader>st viw"ay:call NewScratchBuffer('ack.vim')<CR>q:a:read! ack <Esc>"ap<CR>
nnoremap <Leader>ss :call NewScratchBuffer('swoop.vim')<CR>q:a:read! grep -nH  #<Esc>hha
nnoremap <Leader>pF :call NewScratchBuffer('find.vim')<CR>q:a:read! find . -type f \| grep 
nnoremap <Leader>pf :call NewScratchBuffer('find.vim')<CR>:read! find $(git rev-parse --show-toplevel) -type f \| percol --tty=/dev/tty<CR>gf<C-w>o
nnoremap <Leader>gd :call NewScratchBuffer('git.vim')<CR>q:a:read! git diff<CR>gg
nnoremap <Leader>gh :call NewScratchBuffer('git.vim')<CR>q:a:read! git diff --cached<CR>gg
nnoremap <Leader>gl :call NewScratchBuffer('git.vim')<CR>q:a:read! git log -80<CR>gg
nnoremap <Leader>gs :call NewScratchBuffer('git.vim')<CR>q:a:read! git status<CR>gg

" Quitting
nnoremap <Leader>qq :qa<CR>
nnoremap <Leader>qQ :qa!<CR>

" Utility functions for reading commands into a horizontal split
function MakeSplitBelow()
  split
  execute "normal \<C-w>j"
endfunction

" Change to and delete the contents of a buffer.
" If it doesn't exist, it creates one.
function ChangeTo(name)
  if bufexists(a:name)
    execute "buffer" a:name
    execute "normal ggdG"
  else
    enew
    execute "file" a:name
  endif
endfunction

function NewScratchBuffer(name)
  execute "normal \<C-w>t\<C-w>o"
  call MakeSplitBelow() " TODO Only make split if a buffer with 'name.vim' is not currently visible
  call ChangeTo(a:name)
  resize 18
  setlocal buftype=nofile
  nnoremap <buffer> <CR> 0<C-w>o<C-w>sgF<C-w>j:resize 18<CR><C-w>k
endfunction

" Switch to from insert to normal mode automatically after a timeout.
let s:on = 0
function ToggleAutoEscape()
  let &updatetime = 1500
  let s:on = !s:on
  exec "au".((s:on)?"":"!") "CursorHoldI *" ((s:on)?"stopinsert":"")
endfunction
